RS-DOC

Yet another documentation generator.

                                                                      [Function]
get-doc (symbol)
   Return all documentation items for SYMBOL as a list.
   A symbol can have multiple definitions.  For each definition,
   the ‘get-doc’ function creates one documentation item.

   A documentation item is a property list.  Below is the list of
   documentation item properties together with their meaning.

   :namespace
        The definition's namespace.  Value is either ‘:type’,
        ‘:variable’, or ‘:function’.

   :category
        The definition's category, i.e. a refinement of the
        namespace.  A symbol can only have one definition per
        namespace.  The exception are methods.

        For a type, the category is either ‘:condition’,
        ‘:structure’, ‘:class’, or ‘:type’.
        For a variable, the category is either ‘:constant’,
        ‘:symbol-macro’, or ‘:special’.
        For a function, the category is either ‘:special-form’,
        ‘:macro’, ‘:function’, ‘:generic-function’, or ‘:method’.

   :package
        The symbol's package; ‘nil’ means that the symbol has no
        home package.

   :symbol
        The symbol itself.

   :documentation
        The documentation string itself, or ‘nil’ if it is not
        documented.

   :lambda-list
        The symbol's lambda list.  Only meaningful for functions.

   :method-qualifiers
        A list of method qualifiers, e.g. ‘:around’ or ‘list’.
        Only meaningful for methods.

   :method-specializers
        A list of method specializers, e.g., ‘t’ or ‘(eql 0)’.
        Only meaningful for methods.

   :signature
        The symbol's signature, i.e. a string of the form
        ‘CATEGORY:PACKAGE-NAME:SYMBOL-NAME’.  For methods,
        the signature is extended by the method qualifiers
        and method specializers.

   Examples:

        (get-doc 'pi)
         ⇒ ((:namespace :variable
             :category :constant
             :package #<PACKAGE "COMMON-LISP">
             :symbol pi
             :documentation nil
             :signature "CONSTANT:COMMON-LISP:PI"))

        (get-doc 'print-object)
         ⇒ ((:namespace :function
             :category :generic-function
             :package #<PACKAGE "COMMON-LISP">
             :symbol print-object
             :documentation nil
             :lambda-list (object stream)
             :signature "GENERIC-FUNCTION:COMMON-LISP:PRINT-OBJECT")
            (:namespace :function
             :category :method
             :package #<PACKAGE "COMMON-LISP">
             :symbol print-object
             :documentation nil
             :lambda-list ((object symbol) stream)
             :method-qualifiers nil
             :method-specializers (symbol t)
             :signature "METHOD:COMMON-LISP:PRINT-OBJECT (SYMBOL T)")
            ...)

                                                                      [Function]
gather-doc (&key package symbols include exclude undocumented
            (generic-functions t) (methods t) sort-predicate title subtitle
            prologue epilogue (print-case :downcase) &allow-other-keys)
   Gather documentation for Lisp symbols.

   Keyword argument PACKAGE denotes a package.  Value is either a string
    designator or a package object.
   Keyword argument SYMBOLS is a list of symbols to be documented.
    Null means to document all external symbols of PACKAGE.
   Keyword argument INCLUDE is a list of additionals symbols to be
    documented.
   Keyword argument EXCLUDE is a list of symbols not to be documented.
   Keyword argument UNDOCUMENTED determines whether or not to document
    undocumented symbols.  A value of nil means to exclude undocumented
    symbols.  Any other value means to include undocumented symbols.  If
    the value is a string, it will be used as the documentation string.
    Otherwise, use the string ‘Not documented.’.  Default is to exclude
    undocumented symbols.
   Keyword argument GENERIC-FUNCTIONS determines whether or not to
    document generic functions.  A value of t means to include all
    generic functions, nil means to exclude all generic functions, a
    list of symbols means to include the listed generic functions, a
    list starting with the symbol ‘not’ means to exclude the listed
    generic functions.  Default is to include all generic functions.
   Keyword argument METHODS determines whether or not to document
    methods.  A value of t means to include all methods, nil means to
    exclude all methods, a list of symbols means to include the listed
    methods, a list starting with the symbol ‘not’ means to exclude the
    listed methods.  Default is to include all methods.
   Keyword argument SORT-PREDICATE is a predicate function for sorting
    documentation items.
   Keyword argument TITLE is the title text.  Default is the package
    name of PACKAGE.
   Keyword argument SUBTITLE is the subtitle text.  Default is empty.
   Keyword argument PROLOGUE is the prologue text.  Default is the
    package documentation string of PACKAGE.
   Keyword argument EPILOGUE is the epilogue text.  Default is empty.
   Keyword argument PRINT-CASE is the value of ‘*print-case*’ for
    printing symbol names.

   Return value is a documentation data structure (a plist) suitable
   for the ‘:data’ keyword argument of the ‘generate-doc’ function.

   If you want to create the same documentation in different output
   formats, then you can call the ‘gather-doc’ function once and pass
   the return value to ‘generate-doc’ with different output format
   parameters.  For example:

        (let ((doc (gather-doc :package :foo)))
          (generate-doc :data doc
                        :output-format :text
                        :output #P"foo.txt")
          (generate-doc :data doc
                        :output-format :html
                        :output #P"foo.html"))

   This may save some processing time.

                                                                      [Function]
generate-doc (&rest arguments &key package symbols include exclude undocumented
              (generic-functions t) (methods t) sort-predicate title subtitle
              prologue epilogue (print-case :downcase) data (output t)
              (output-format :text))
   Generate documentation for Lisp symbols.

   Keyword arguments PACKAGE, SYMBOLS, INCLUDE, EXCLUDE,
    GENERIC-FUNCTIONS, METHODS, SORT-PREDICATE, TITLE, SUBTITLE,
    PROLOGUE, EPILOGUE, and PRINT-CASE are equal to the respective
    keyword argument of the ‘gather-doc’ function.  However, these
    parameters are only used if the DATA keyword argument is null.
   Keyword argument DATA is a documentation data structure as returned
    by the ‘gather-doc’ function.
   Keyword argument OUTPUT is the output destination.  Value is either
    an output stream, a pathname, or a string.  A value of t is equal
    to ‘*standard-output*’ and nil means to return a new string.
    Default is t.
   Keyword argument OUTPUT-FORMAT is the output file format.  Value is
    either :text or :html.  Default is to generate plain text.

                                                              [Special Variable]
*cross-references*
   Whether or not to add cross references.

                                                              [Special Variable]
*lambda-list-init-form*
   Whether or not to include the initialization form
   for optional and keyword parameters.

                                                              [Special Variable]
*text-width*
   The text width.  Value has to be at least 40.

                                                              [Special Variable]
*text-wrap*
   Whether or not to wrap long lambda lists.

                                                              [Special Variable]
*text-indent*
   Whether or not to indent the documentation.
   Non-null is the number of characters.

                                                              [Special Variable]
*html-template*
   The HTML template file.

   The template file is coded up by the user.  The ‘generate-doc’
   function uses Edi Weitz's HTML-TEMPLATE library for filling in
   the documentation strings.  Below is the list of template tags
   together with their meaning.

   TMPL_VAR TITLE
        Value of the TITLE keyword argument.

   TMPL_VAR SUBTITLE
        Value of the SUBTITLE keyword argument.

   TMPL_VAR PROLOGUE
        Value of the PROLOGUE keyword argument.

   TMPL_LOOP DICTIONARY
        List of dictionary entries.

        TMPL_VAR ID
             The named UUID of the dictionary entry.  Can be used as part
             of an HTML element identifier.  Please note that an UUID may
             start with a decimal digit.

        TMPL_VAR NAMESPACE
             The symbol's namespace.  Value is either ‘Type’, ‘Variable’,
             or ‘Function’.  See also the IN-FOO-NAMESPACE conditionals
             below.

        TMPL_IF IN-TYPE-NAMESPACE
        TMPL_IF IN-VARIABLE-NAMESPACE
        TMPL_IF IN-FUNCTION-NAMESPACE
             True if the symbol is defined in the type, variable, or
             function namespace respectively.  These conditionals are
             mutually exclusive.

        TMPL_VAR CATEGORY
             The symbol's category.  Value is either ‘Condition’,
             ‘Structure’, ‘Class’, ‘Type’, ‘Constant’, ‘Symbol Macro’,
             ‘Special Variable’, ‘Special Form’, ‘Macro’, ‘Function’,
             ‘Generic Function’, or ‘Method’.  See also the IS-FOO
             conditionals below.

        TMPL_IF IS-CONDITION
        TMPL_IF IS-STRUCTURE
        TMPL_IF IS-CLASS
        TMPL_IF IS-TYPE
        TMPL_IF IS-CONSTANT
        TMPL_IF IS-SYMBOL-MACRO
        TMPL_IF IS-SPECIAL
        TMPL_IF IS-SPECIAL-FORM
        TMPL_IF IS-MACRO
        TMPL_IF IS-FUNCTION
        TMPL_IF IS-GENERIC-FUNCTION
        TMPL_IF IS-METHOD
             True if the dictionary entry documents a condition,
             structure, class, type specifier, constant, symbol macro,
             special variable, special form, macro, function, generic
             function or method respectively.  These conditionals are
             mutually exclusive.

        TMPL_VAR PACKAGE
             The symbol's package name.  This tag can be used as a
             conditional, too.  False means that the symbol has no
             home package.

        TMPL_VAR SYMBOL
             The symbol name.

        TMPL_LOOP LAMBDA-LIST
             The symbol's lambda list.

             TMPL_IF IS-KEYWORD
             TMPL_IF IS-PARAMETER
             TMPL_IF IS-LAMBDA-LIST
                  True if the element is a lambda list keyword, a
                  parameter specification, or an inner lambda list
                  respectively.  These conditionals are mutually
                  exclusive.

             TMPL_VAR KEYWORD
                  The lambda list keyword, e.g. ‘&key’.

             TMPL_VAR VARIABLE
                  The variable name of a parameter specifier.  If the
                  element is a keyword parameter, this is the keyword
                  name and not the variable name.

             TMPL_VAR INIT-FORM
                  The initialization form of a parameter specifier.
                  Can only be true if the element is an optional or
                  keyword parameter.

             TMPL_VAR METHOD-SPECIALIZER
                  True if the element is a method specializer.  Value
                  is either a class name, e.g. ‘string’, or a ‘eql’
                  specializer, e.g. ‘(eql 0)’.  If the class name of
                  the method specializer is ‘t’, the value of the HTML
                  template variable METHOD-SPECIALIZER is false.

             TMPL_IF IS-EQL-SPECIALIZER
                  True if the method specializer is an ‘eql’ specializer.

             TMPL_VAR EQL-SPECIALIZER-OBJECT
                  The ‘eql’ specializer object, e.g. ‘0’.

             TMPL_LOOP LAMBDA-LIST
                  The inner lambda list.

             TMPL_VAR SEPARATOR
                  True if this is not the first element.  Value is a
                  single space character.

        TMPL_LOOP METHOD-QUALIFIERS
             List of method qualifiers.

             TMPL_VAR METHOD-QUALIFIER
                  The method qualifier, e.g. ‘:around’ or ‘list’.

             TMPL_VAR SEPARATOR
                  True if this is not the first element.  Value is a
                  single space character.

        TMPL_LOOP METHOD-SPECIALIZERS
             List of method specializers (class name ‘t’ is not omitted).

             TMPL_VAR METHOD-SPECIALIZER
                  The method specializer, e.g. ‘t’ or ‘(eql 0)’.

             TMPL_IF IS-EQL-SPECIALIZER
                  True if the method specializer is an ‘eql’ specializer.

             TMPL_VAR EQL-SPECIALIZER-OBJECT
                  The ‘eql’ specializer object, e.g. 0.

             TMPL_VAR SEPARATOR
                  True if this is not the first element.  Value is a
                  single space character.

        TMPL_VAR DOCUMENTATION
             The documentation string itself.

   TMPL_VAR EPILOGUE
        Value of the EPILOGUE keyword argument.

   TMPL_VAR DOCUMENTATION-TOOL-NAME
   TMPL_VAR DOCUMENTATION-TOOL-DESCRIPTION
   TMPL_VAR DOCUMENTATION-TOOL-AUTHOR
   TMPL_VAR DOCUMENTATION-TOOL-LICENSE
   TMPL_VAR DOCUMENTATION-TOOL-VERSION
        Information about the documentation tool.

                                                              [Special Variable]
*html-values*
   Additional HTML template values.

                                                              [Special Variable]
*html-resources*
   List of files required by the HTML template file.
   For example, CSS style sheets or image files.

   The ‘generate-doc’ function will copy these files into the directory
   of the generated HTML page.
